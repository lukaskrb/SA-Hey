from PyQt6.QtCore import QTime, QTimer
from PyQt6.QtWidgets import QWidget, QGridLayout, QLabel, QLineEdit, QPushButton, QTimeEdit, QLCDNumber, QRadioButton, QTextBrowser

class CentralWidget(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)

        # Timer und Zeitinitialisierung
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_timer)
        self.time_left = QTime(0, 0, 5)

        # Widgets erstellen
        self.blind_input = QLineEdit("50.00")
        self.raise_percent_input = QLineEdit("15.3")
        self.raise_euro_input = QLineEdit("10.00")

        self.time_edit = QTimeEdit(self.time_left)
        self.time_edit.setDisplayFormat("hh:mm:ss")

        self.start_button = QPushButton("Start")
        self.start_button.clicked.connect(self.start_timer)

        self.lcd_display = QLCDNumber()
        self.lcd_display.display(self.time_left.toString("hh:mm:ss"))

        self.radio_percent = QRadioButton("Raise in %")
        self.radio_euro = QRadioButton("Raise in €")

        self.text_browser = QTextBrowser()
        self.text_browser.append("Ready")

        # Layout erstellen
        layout = QGridLayout()
        layout.addWidget(QLabel("Blind in €"), 0, 0)
        layout.addWidget(self.blind_input, 0, 1)

        layout.addWidget(QLabel("Raise Time"), 1, 0)
        layout.addWidget(self.time_edit, 1, 1)

        layout.addWidget(self.radio_percent, 2, 0)
        layout.addWidget(self.raise_percent_input, 2, 1)

        layout.addWidget(self.radio_euro, 3, 0)
        layout.addWidget(self.raise_euro_input, 3, 1)

        layout.addWidget(self.start_button, 0, 2)
        layout.addWidget(self.lcd_display, 1, 2)
        layout.addWidget(self.text_browser, 4, 0, 1, 3)

        self.setLayout(layout)

    def start_timer(self):
        self.start_button.setText("Stop")
        self.start_button.clicked.disconnect()
        self.start_button.clicked.connect(self.stop_timer)

        # Eingaben deaktivieren
        self.set_inputs_enabled(False)

        self.time_left = self.time_edit.time()
        self.timer.start(1000)  # Timer alle 1 Sekunde auslösen

    def stop_timer(self):
        self.start_button.setText("Start")
        self.start_button.clicked.disconnect()
        self.start_button.clicked.connect(self.start_timer)

        # Eingaben aktivieren
        self.set_inputs_enabled(True)

        self.timer.stop()
        self.lcd_display.display(self.time_edit.time().toString("hh:mm:ss"))

    def update_timer(self):
        if self.time_left == QTime(0, 0, 0):
            self.time_left = self.time_edit.time()
            self.text_browser.append("Blind raised.")
        else:
            self.time_left = self.time_left.addSecs(-1)

        self.lcd_display.display(self.time_left.toString("hh:mm:ss"))

    def set_inputs_enabled(self, enabled):
        self.blind_input.setEnabled(enabled)
        self.raise_percent_input.setEnabled(enabled)
        self.raise_euro_input.setEnabled(enabled)
        self.time_edit.setEnabled(enabled)
        self.radio_percent.setEnabled(enabled)
        self.radio_euro.setEnabled(enabled)
